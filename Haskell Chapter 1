-- HC1T1 - Task 1: Function Composition
double :: Int -> Int
double x = x * 2

increment :: Int -> Int
increment x = x + 1

doubleThenIncrement :: Int -> Int
doubleThenIncrement = increment . double

-- HC1T2 - Task 2: Pure Function Example
circleArea :: Floating a => a -> a
circleArea r = pi * r * r

-- HC1T3 - Task 3: Checking if a Number is Greater than 18
greaterThan18 :: Int -> Bool
greaterThan18 x = x > 18

-- HC1T4 - Task 4: Composing a Function to Process Player Data
type Player = (String, Int)

extractPlayers :: [Player] -> [String]
extractPlayers players = map fst players

sortByScore :: [Player] -> [Player]
sortByScore players = reverse (quickSort players)
  where
    quickSort [] = []
    quickSort (p:ps) = quickSort [x | x <- ps, snd x <= snd p]
                     ++ [p]
                     ++ quickSort [x | x <- ps, snd x > snd p]

topThree :: [Player] -> [Player]
topThree = take 3

getTopThreePlayers :: [Player] -> [String]
getTopThreePlayers = extractPlayers . topThree . sortByScore

-- HC1T5 - Task 5: Laziness in Haskell
infiniteNumbers :: [Int]
infiniteNumbers = [1..]

firstN :: Int -> [Int]
firstN n = take n infiniteNumbers

-- HC1T6 - Task 6: Using Type Signatures
addNumbers :: Int -> Int -> Int
addNumbers x y = x + y

-- HC1T7 - Task 7: Converting Fahrenheit to Celsius
fToC :: Floating a => a -> a
fToC f = (f - 32) * 5 / 9

-- HC1T8 - Task 8: Higher-Order Functions
applyTwice :: (a -> a) -> a -> a
applyTwice f x = f (f x)

-- Main function to demonstrate functionality
main :: IO ()
main = do
    putStrLn "HC1T1:"
    print (doubleThenIncrement 3) -- Output: 7

    putStrLn "\nHC1T2:"
    print (circleArea 5) -- Output: 78.53981633974483

    putStrLn "\nHC1T3:"
    print (greaterThan18 20) -- Output: True
    print (greaterThan18 10) -- Output: False

    putStrLn "\nHC1T4:"
    let players = [("Alice", 10), ("Bob", 20), ("Charlie", 15), ("Diana", 25)]
    print (getTopThreePlayers players) -- Output: ["Diana", "Bob", "Charlie"]

    putStrLn "\nHC1T5:"
    print (firstN 5) -- Output: [1,2,3,4,5]

    putStrLn "\nHC1T6:"
    print (addNumbers 4 6) -- Output: 10

    putStrLn "\nHC1T7:"
    print (fToC 98.6) -- Output: 37.0

    putStrLn "\nHC1T8:"
    print (applyTwice (+3) 4) -- Output: 10
