-- HC6T1: Factorial (Recursive)
factorial :: Integer -> Integer
factorial 0 = 1
factorial n = n * factorial (n - 1)

-- HC6T2: Fibonacci (Recursive)
fibonacci :: Integer -> Integer
fibonacci 0 = 0
fibonacci 1 = 1
fibonacci n = fibonacci (n - 1) + fibonacci (n - 2)

-- HC6T3: Sum of Elements Using foldr
sumFoldr :: Num a => [a] -> a
sumFoldr = foldr (+) 0

-- HC6T4: Product of Elements Using foldl
productFoldl :: Num a => [a] -> a
productFoldl = foldl (*) 1

-- HC6T5: Reverse a List (Recursive)
reverseRec :: [a] -> [a]
reverseRec [] = []
reverseRec (x:xs) = reverseRec xs ++ [x]

-- HC6T6: Element Exists in List
elementExists :: Eq a => a -> [a] -> Bool
elementExists _ [] = False
elementExists e (x:xs) = (e == x) || elementExists e xs

-- HC6T7: List Length
listLength :: [a] -> Int
listLength [] = 0
listLength (_:xs) = 1 + listLength xs

-- HC6T8: Filter Even Numbers
filterEven :: Integral a => [a] -> [a]
filterEven = filter even

-- HC6T9: Map Implementation
mapRec :: (a -> b) -> [a] -> [b]
mapRec _ [] = []
mapRec f (x:xs) = f x : mapRec f xs

-- HC6T10: Digits of a Number (Recursive)
digits :: Integral a => a -> [a]
digits n
  | n < 10 = [n]
  | otherwise = digits (n `div` 10) ++ [n `mod` 10]

-- Main to demonstrate all functions
main :: IO ()
main = do
  putStrLn "HC6T1: Factorial of 5"
  print $ factorial 5           -- 120

  putStrLn "\nHC6T2: 10th Fibonacci number"
  print $ fibonacci 10          -- 55

  putStrLn "\nHC6T3: Sum of [1..5] using foldr"
  print $ sumFoldr [1..5]       -- 15

  putStrLn "\nHC6T4: Product of [1..5] using foldl"
  print $ productFoldl [1..5]   -- 120

  putStrLn "\nHC6T5: Reverse [1,2,3,4,5]"
  print $ reverseRec [1,2,3,4,5] -- [5,4,3,2,1]

  putStrLn "\nHC6T6: Check if 3 exists in [1,2,3,4]"
  print $ elementExists 3 [1,2,3,4] -- True

  putStrLn "\nHC6T7: Length of [1,2,3,4,5]"
  print $ listLength [1,2,3,4,5]   -- 5

  putStrLn "\nHC6T8: Filter even numbers from [1..10]"
  print $ filterEven [1..10]        -- [2,4,6,8,10]

  putStrLn "\nHC6T9: Map (*2) over [1..5]"
  print $ mapRec (*2) [1..5]        -- [2,4,6,8,10]

  putStrLn "\nHC6T10: Digits of 12345"
  print $ digits 12345               -- [1,2,3,4,5]
