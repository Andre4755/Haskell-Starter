module Main where

import Data.Char (intToDigit) -- Not strictly needed for these tasks, but often useful
import Numeric (showHex)     -- Not strictly needed for these tasks, but often useful

-- HC4T1 - Task 1: Define a weatherReport Function
weatherReport :: String -> String
weatherReport "sunny"  = "It's a bright and beautiful day!"
weatherReport "rainy"  = "Don't forget your umbrella!"
weatherReport "cloudy" = "A bit gloomy, but no rain yet!"
weatherReport _        = "Weather unknown"

-- HC4T2 - Task 2: Define a dayType Function
dayType :: String -> String
dayType "Saturday" = "It's a weekend!"
dayType "Sunday"   = "It's a weekend!"
dayType "Monday"   = "It's a weekday."
dayType "Tuesday"  = "It's a weekday."
dayType "Wednesday"= "It's a weekday."
dayType "Thursday" = "It's a weekday."
dayType "Friday"   = "It's a weekday."
dayType _          = "Invalid day"

-- HC4T3 - Task 3: Define a gradeComment Function
gradeComment :: Int -> String
gradeComment grade
  | grade >= 90 && grade <= 100 = "Excellent!"
  | grade >= 70 && grade <= 89  = "Good job!"
  | grade >= 50 && grade <= 69  = "You passed."
  | grade >= 0 && grade <= 49   = "Better luck next time."
  | otherwise                   = "Invalid grade"

-- HC4T4 & HC4T5: Rewrite specialBirthday using Pattern Matching & Add Catch-All
specialBirthday :: Int -> String
specialBirthday 18 = "Happy 18th, you're an adult now!"
specialBirthday 21 = "Happy 21st, enjoy your freedom!"
specialBirthday 65 = "Happy 65th, time to relax!"
specialBirthday age = "Happy " ++ show age ++ "th Birthday!"

-- HC4T6 - Task 6: Identify List Contents Using Pattern Matching
whatsInsideThisList :: [a] -> String
whatsInsideThisList []        = "The list is empty."
whatsInsideThisList [_]       = "The list contains one element."
whatsInsideThisList [_,_]     = "The list contains two elements."
whatsInsideThisList _         = "The list contains many elements."

-- HC4T7 - Task 7: Ignore Elements in a List
firstAndThird :: [a] -> (a, a)
firstAndThird (x:_:z:_) = (x, z)
firstAndThird _         = error "List must have at least three elements to extract first and third."

-- HC4T8 - Task 8: Extract Values from Tuples
describeTuple :: (String, Int, String) -> String
describeTuple (name, age, city) =
  "Name: " ++ name ++ ", Age: " ++ show age ++ ", City: " ++ city

-- Main function to test all tasks
main :: IO ()
main = do
  putStrLn "--- HC4T1: weatherReport Tests ---"
  print (weatherReport "sunny")
  print (weatherReport "rainy")
  print (weatherReport "cloudy")
  print (weatherReport "snowy")
  print (weatherReport "windy")

  putStrLn "\n--- HC4T2: dayType Tests ---"
  print (dayType "Saturday")
  print (dayType "Monday")
  print (dayType "Wednesday")
  print (dayType "Funday")

  putStrLn "\n--- HC4T3: gradeComment Tests ---"
  print (gradeComment 95)
  print (gradeComment 78)
  print (gradeComment 62)
  print (gradeComment 30)
  print (gradeComment 105)
  print (gradeComment (-5))

  putStrLn "\n--- HC4T4 & HC4T5: specialBirthday Tests ---"
  print (specialBirthday 18)
  print (specialBirthday 21)
  print (specialBirthday 65)
  print (specialBirthday 30)
  print (specialBirthday 5)

  putStrLn "\n--- HC4T6: whatsInsideThisList Tests ---"
  print (whatsInsideThisList ([] :: [Int]))
  print (whatsInsideThisList [1])
  print (whatsInsideThisList [1, 2])
  print (whatsInsideThisList [1, 2, 3])
  print (whatsInsideThisList ["a", "b", "c", "d"])

  putStrLn "\n--- HC4T7: firstAndThird Tests ---"
  print (firstAndThird [10, 20, 30, 40, 50])
  print (firstAndThird ['a', 'b', 'c'])

  putStrLn "\n--- HC4T8: describeTuple Tests ---"
  print (describeTuple ("Alice", 30, "New York"))
  print (describeTuple ("Bob", 25, "London"))
