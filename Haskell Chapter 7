-- HC7T1 & HC7T2: Color Eq & Ord
data Color = Red | Green | Blue
    deriving (Show)

instance Eq Color where
    Red   == Red   = True
    Green == Green = True
    Blue  == Blue  = True
    _     == _     = False

instance Ord Color where
    compare Red Green  = LT
    compare Red Blue   = LT
    compare Green Blue = LT
    compare Green Red  = GT
    compare Blue Red   = GT
    compare Blue Green = GT
    compare _ _        = EQ

compareValues :: Ord a => a -> a -> Ordering
compareValues = compare

-- HC7T3: Shape Data Type
data Shape = Circle Float | Rectangle Float Float
    deriving (Show, Eq)

-- HC7T10 fix: Ord instance for Shape
instance Ord Shape where
    compare (Circle r1) (Circle r2) = compare r1 r2
    compare (Rectangle w1 h1) (Rectangle w2 h2) =
        compare (w1 * h1) (w2 * h2)  -- compare by area
    compare (Circle _) (Rectangle _ _) = LT
    compare (Rectangle _ _) (Circle _) = GT

-- HC7T4: Area functions
squareArea :: Num a => a -> a
squareArea side = side * side

circleCircumference :: Floating a => a -> a
circleCircumference radius = 2 * pi * radius

-- HC7T7: Next Color
nextColor :: Color -> Color
nextColor Red   = Green
nextColor Green = Blue
nextColor Blue  = Red

-- HC7T8: Parse Shape
parseShape :: String -> Maybe Shape
parseShape str =
    case words str of
        ["Circle", r]     -> Just (Circle (read r))
        ["Rectangle", w, h] -> Just (Rectangle (read w) (read h))
        _                 -> Nothing

-- HC7T9: Describable Typeclass
class Describable a where
    describe :: a -> String

instance Describable Bool where
    describe True  = "This is True"
    describe False = "This is False"

instance Describable Shape where
    describe (Circle r)       = "A circle with radius " ++ show r
    describe (Rectangle w h)  = "A rectangle of width " ++ show w ++ " and height " ++ show h

-- HC7T10: Describe and Compare
describeAndCompare :: (Describable a, Ord a) => a -> a -> String
describeAndCompare x y =
    let cmp = compare x y
        cmpStr = case cmp of
                    LT -> "less than"
                    EQ -> "equal to"
                    GT -> "greater than"
    in describe x ++ " is " ++ cmpStr ++ " " ++ describe y

-- MAIN
main :: IO ()
main = do
    putStrLn "=== HC7T1 & HC7T2: Color Eq & Ord ==="
    print (Red == Green)
    print (compare Red Blue)
    print (compareValues Green Blue)

    putStrLn "\n=== HC7T3 & HC7T4: Shapes and Area ==="
    let c = Circle 5
    let r = Rectangle 4 6
    print c
    print r

    putStrLn "\n=== HC7T5: Square Area ==="
    print (squareArea 7 :: Int)

    putStrLn "\n=== HC7T6: Circle Circumference ==="
    print (circleCircumference 3)

    putStrLn "\n=== HC7T7: Next Color ==="
    print (nextColor Red)
    print (nextColor Blue)

    putStrLn "\n=== HC7T8: Parse Shape ==="
    print (parseShape "Circle 10" :: Maybe Shape)
